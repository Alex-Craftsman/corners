// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../.prisma"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum GameState {
    PENDING
    ACTIVE
    FINISHED
    ABORTED
    EXPIRED
}

enum GameTurn {
    p1
    p2
}

enum GameFlavor {
    standard
    line
    diagonal
}

model Game {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String

    p1   User?   @relation("Game_User_p1", fields: [p1Id], references: [id])
    p1Id String?

    p2   User?   @relation(name: "Game_User_p2", fields: [p2Id], references: [id])
    p2Id String?

    createdBy   User   @relation(name: "Game_User_createdBy", fields: [createdById], references: [id])
    createdById String

    winner   User?   @relation(name: "Game_User_winner", fields: [winnerId], references: [id])
    winnerId String?

    state GameState @default(PENDING)

    turn GameTurn @default(p1)

    flavor GameFlavor @default(standard)

    p1CancelRequest Boolean @default(false)
    p2CancelRequest Boolean @default(false)

    move Move[]

    @@index([name])
}

model Move {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    game   Game   @relation(fields: [gameId], references: [id])
    gameId String

    player   User   @relation(fields: [playerId], references: [id])
    playerId String

    checkerId String

    positionIdFrom String

    positionIdTo String

    @@index([gameId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id     String @id @default(cuid())
    userId String

    expiresAt DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    gameCreated   Game[]    @relation("Game_User_createdBy")
    move          Move[]
    gameP1        Game[]    @relation("Game_User_p1")
    gameP2        Game[]    @relation("Game_User_p2")
    gameWinner    Game[]    @relation("Game_User_winner")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
